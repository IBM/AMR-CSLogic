# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ACEDoc_pb2 as ACEDoc__pb2
from . import ace_pb2 as ace__pb2


class aceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.process_text = channel.unary_unary(
        '/ace/process_text',
        request_serializer=ace__pb2.acedoc_request.SerializeToString,
        response_deserializer=ACEDoc__pb2.acedoc.FromString,
        )
    self.process_doc = channel.unary_unary(
        '/ace/process_doc',
        request_serializer=ACEDoc__pb2.acedoc.SerializeToString,
        response_deserializer=ACEDoc__pb2.acedoc.FromString,
        )
    self.process_xml = channel.unary_unary(
        '/ace/process_xml',
        request_serializer=ace__pb2.acedoc_xml.SerializeToString,
        response_deserializer=ACEDoc__pb2.acedoc.FromString,
        )
    self.to_xml = channel.unary_unary(
        '/ace/to_xml',
        request_serializer=ACEDoc__pb2.acedoc.SerializeToString,
        response_deserializer=ace__pb2.acedoc_xml.FromString,
        )
    self.to_doc = channel.unary_unary(
        '/ace/to_doc',
        request_serializer=ace__pb2.acedoc_xml.SerializeToString,
        response_deserializer=ACEDoc__pb2.acedoc.FromString,
        )


class aceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def process_text(self, request, context):
    # missing associated documentation comment in .proto file
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def process_doc(self, request, context):
    # missing associated documentation comment in .proto file
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def process_xml(self, request, context):
    # missing associated documentation comment in .proto file
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def to_xml(self, request, context):
    # missing associated documentation comment in .proto file
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def to_doc(self, request, context):
    # missing associated documentation comment in .proto file
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_aceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'process_text': grpc.unary_unary_rpc_method_handler(
          servicer.process_text,
          request_deserializer=ace__pb2.acedoc_request.FromString,
          response_serializer=ACEDoc__pb2.acedoc.SerializeToString,
      ),
      'process_doc': grpc.unary_unary_rpc_method_handler(
          servicer.process_doc,
          request_deserializer=ACEDoc__pb2.acedoc.FromString,
          response_serializer=ACEDoc__pb2.acedoc.SerializeToString,
      ),
      'process_xml': grpc.unary_unary_rpc_method_handler(
          servicer.process_xml,
          request_deserializer=ace__pb2.acedoc_xml.FromString,
          response_serializer=ACEDoc__pb2.acedoc.SerializeToString,
      ),
      'to_xml': grpc.unary_unary_rpc_method_handler(
          servicer.to_xml,
          request_deserializer=ACEDoc__pb2.acedoc.FromString,
          response_serializer=ace__pb2.acedoc_xml.SerializeToString,
      ),
      'to_doc': grpc.unary_unary_rpc_method_handler(
          servicer.to_doc,
          request_deserializer=ace__pb2.acedoc_xml.FromString,
          response_serializer=ACEDoc__pb2.acedoc.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ace', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))